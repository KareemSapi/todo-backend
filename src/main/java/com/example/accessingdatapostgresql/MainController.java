package com.example.accessingdatapostgresql;

//import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
//import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

//import com.example.accessingdatapostgresql.Items;

@Controller //means that the class is a controller.
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping(path = "/to-do") // This means URL's start with /to-do (after Application path)

public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ItemsRepository itemsRepository;
    
    @PostMapping(path = "/add/{description}") // Map only post requests
     public @ResponseBody void addNewItem(@PathVariable String description){
            // @ResponseBody means the returned String is the response, not a view name
            // @RequestParam means it is a parameter from the GET or POST request
        Items newItem = new Items();
        newItem.setDescription(description);
        newItem.setDone(false);
        itemsRepository.save(newItem);
        //return "Saved";
    }
    
 
    /* 
    @PostMapping(path = "/add") // Map only post requests
    public @ResponseBody String addNewItem(@RequestBody Items item){
            // @ResponseBody means the returned String is the response, not a view name
            // @RequestBody means it is a body from the GET or POST request
        Items newItem = new Items();
        newItem.setDescription(item.getDescription());
        newItem.setDone(false);
        itemsRepository.save(newItem);
        return "Saved";
    } */

    @GetMapping(path = "/all") // Map only get requests
    public @ResponseBody Iterable<Items> getAllItems(){
        // This returns a JSON or XML with the items.
        return itemsRepository.findAll();
    }

    /* 
    @GetMapping(path = "/{id}")
    public @ResponseBody Optional<Items> getItemById(@PathVariable int id){
        return itemsRepository.findById(id);
    }
    */
    
    @PutMapping(path = "/update/{id}")
    public @ResponseBody String updateItem(@PathVariable int id, @RequestParam String description, @RequestParam Boolean done){
        Items updateItem = new Items();
        itemsRepository.findById(id);

        if(itemsRepository.existsById(id)){
            updateItem.setDescription(description);

            if(done){
                updateItem.setDone(true);
            }else{
                updateItem.setDone(false);
            }

           itemsRepository.save(updateItem);
        }else{
            return "No record";
        }
        return "Record successfully updated";
    }

    @DeleteMapping(path = "/delete/{id}")
    public @ResponseBody void deleteItem(@PathVariable int id){
         itemsRepository.deleteById(id);
         //return "item successfuly deleted";
    }
}
